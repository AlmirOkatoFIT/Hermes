/**
 *  Hermes
 *
 *  Copyright 2016 Frank Miranda
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 */
definition(
    name: "Hermes",
    namespace: "RFMicron",
    author: "Frank Miranda",
    description: "App that demonstrates the IoT capabilities of RFMicron's Smart Passive Sensors",
    category: "Convenience",
    iconUrl: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience.png",
    iconX2Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png",
    iconX3Url: "https://s3.amazonaws.com/smartapp-icons/Convenience/Cat-Convenience@2x.png")


preferences {
	 section("When the temperature is above the threshold...") {
        input "Hermes", "capability.temperatureMeasurement"
    }
    section("sound the alarm and...") {
         input "alarm", "capability.alarm"
    }
     section("Send a notification to...") {
		input("recipients", "contact", title: "Recipients", description: "Send notifications to") {
			input "phone", "phone", title: "Phone number?", required: false
		}
	}
}

def installed() {
	log.debug "Installed with settings: ${settings}"

	initialize()
}

def updated() {
	log.debug "Updated with settings: ${settings}"

	unsubscribe()
	initialize()
}

def initialize() {
     subscribe(Hermes, "temperature", tempHandler)
     subscribe(Hermes, "threshold", thresholdHandler)
}

def thresholdHandler(evt) {
  	def temp = Hermes.temperatureState
    def threshold = Hermes.thresholdState
    if(temp.floatValue > threshold.floatValue)
    {
    	def msg = "The temp ${temp.floatValue}°C is above threshold ${threshold.floatValue}°C! Alarm on."
        alarm.on()
        /*sendPush(msg)
        if (phone) 
        {
            sendSms(phone, msg)
        }*/
    }
    else if(temp.floatValue <= threshold.floatValue)
    {
    	def msg = "The temp ${temp.floatValue}°C is below threshold ${threshold.floatValue}°C! Alarm off."
        alarm.off()
        /*sendPush(msg)
        if (phone) 
        {
            sendSms(phone, msg)
        }*/
    }
}

def tempHandler(evt) {
    def temp = Hermes.temperatureState
    def threshold = Hermes.thresholdState
  	if(temp.floatValue > threshold.floatValue)
    {
    	def msg = "The temp ${temp.floatValue}°C is above threshold ${threshold.floatValue}°C! Alarm on."
        alarm.on()
        /*sendPush(msg)
        if (phone) 
        {
            sendSms(phone, msg)
        }*/
    }
    else if(temp.floatValue <= threshold.floatValue)
    {
    	def msg = "The temp ${temp.floatValue}°C is below threshold ${threshold.floatValue}°C! Alarm off."
        alarm.off()
        /*sendPush(msg)
        if (phone) 
        {
            sendSms(phone, msg)
        }*/
    }
}

