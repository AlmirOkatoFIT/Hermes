/**
 *  Copyright 2015 SmartThings
 *
 *  Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 *  in compliance with the License. You may obtain a copy of the License at:
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed
 *  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License
 *  for the specific language governing permissions and limitations under the License.
 *
 *	CentraLite Thermostat
 *
 *	Author: SmartThings
 *	Date: 2013-12-02
 */
metadata {
	definition (name: "Hermes Temp Sensor", namespace: "RFMicron", author: "Frank Miranda") {
		capability "Temperature Measurement"
        capability "Sensor"
        command "getTemp"
        command "cancelGetTemp"
        command "setThreshold", ["string"]
        attribute "threshold", "number"
		fingerprint profileId: "0104", inClusters: "0000, 0003, 0402", endpointId: "08"
	}

	tiles(scale: 2) {
		multiAttributeTile(name:"temperature", type: "generic", width: 6, height: 4){
			tileAttribute ("temperature", key: "PRIMARY_CONTROL") {
				attributeState "temperature", label:'${currentValue}°C',
					backgroundColors:[
						[value: 31, color: "#153591"],
						[value: 44, color: "#1e9cbb"],
						[value: 59, color: "#90d2a7"],
						[value: 74, color: "#44b621"],
						[value: 84, color: "#f1d801"],
						[value: 95, color: "#d04e00"],
						[value: 96, color: "#bc2323"]
					]
			} 
		}
        controlTile("thresholdSlider", "threshold", "slider", height: 2, width: 4, inactiveLabel: false, range:"(0..120)") {
			state "default", action:"setThreshold", backgroundColor: "#bc2323" 
		}
		valueTile("threshold", "threshold", inactiveLabel: false,  height: 2, width: 2, ) {
			state "default", label:'Threshold:\n${currentValue}°C', backgroundColor:"#ffffff"
		}
        valueTile("company", "logo", inactiveLabel: false,  height: 2, width: 4, ) {
			state "default", label:"RFMicron Smart Passive Sensing", backgroundColor:"#ffffff"
		}
        standardTile("tempButton", "state", width: 2, height: 2, canChangeIcon: true) {
			state "Temp", label:'${name}', action: "getTemp", icon: "st.Weather.weather2",  backgroundColor: "#ffffff", nextState: "wait..."
			state "wait...", label:'${name}', action: "cancelGetTemp", icon: "st.Weather.weather2", backgroundColor: "#90d2a7"
        }
		main "temperature"
		details(["temperature", "thresholdSlider", "threshold", "company", "tempButton"])
	}
}

def setThreshold(degrees) {
		sendEvent(name: "threshold", value: Math.round(degrees))
}

// Parse incoming device messages to generate events
def parse(String description) {
	if (description?.startsWith('catchall:')) { 
        def cluster = zigbee.parse(description) 
        // temp is last 2 data values. reverse to swap endian 
        String temp = cluster.data[-2..-1].reverse().collect { cluster.hex1(it) }.join() 
        def celsius = Integer.parseInt(temp, 16).shortValue() / 10
        if(celsius == 227)
        	sendEvent(name: "temperature", value: "No Tag!")
        else if(celsius == 226)
        	sendEvent(name: "temperature", value: "No Temp!")
        else
        	sendEvent(name: "temperature", value: celsius)
        sendEvent(name: "state", isStateChange: true, display: false)
	}
}

def getTemp() {
    "st rattr 0x${device.deviceNetworkId} ${device.endpointId} 0x0402 0x0000"
}

def cancelGetTemp() {
}
